// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gorush.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	gorush.proto

It has these top-level messages:
	NotificationRequest
	NotificationReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type NotificationRequest struct {
	Tokens   []string          `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	Platform int32             `protobuf:"varint,2,opt,name=platform" json:"platform,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Title    string            `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Topic    string            `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	Key      string            `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	Badge    int32             `protobuf:"varint,7,opt,name=badge" json:"badge,omitempty"`
	Data     map[string]string `protobuf:"bytes,8,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotificationRequest) Reset()                    { *m = NotificationRequest{} }
func (m *NotificationRequest) String() string            { return proto1.CompactTextString(m) }
func (*NotificationRequest) ProtoMessage()               {}
func (*NotificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NotificationRequest) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *NotificationRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *NotificationRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NotificationRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NotificationRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *NotificationRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NotificationRequest) GetBadge() int32 {
	if m != nil {
		return m.Badge
	}
	return 0
}

func (m *NotificationRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotificationReply struct {
	Success bool  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Counts  int32 `protobuf:"varint,2,opt,name=counts" json:"counts,omitempty"`
}

func (m *NotificationReply) Reset()                    { *m = NotificationReply{} }
func (m *NotificationReply) String() string            { return proto1.CompactTextString(m) }
func (*NotificationReply) ProtoMessage()               {}
func (*NotificationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NotificationReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *NotificationReply) GetCounts() int32 {
	if m != nil {
		return m.Counts
	}
	return 0
}

func init() {
	proto1.RegisterType((*NotificationRequest)(nil), "proto.NotificationRequest")
	proto1.RegisterType((*NotificationReply)(nil), "proto.NotificationReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gorush service

type GorushClient interface {
	Send(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationReply, error)
}

type gorushClient struct {
	cc *grpc.ClientConn
}

func NewGorushClient(cc *grpc.ClientConn) GorushClient {
	return &gorushClient{cc}
}

func (c *gorushClient) Send(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationReply, error) {
	out := new(NotificationReply)
	err := grpc.Invoke(ctx, "/proto.Gorush/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gorush service

type GorushServer interface {
	Send(context.Context, *NotificationRequest) (*NotificationReply, error)
}

func RegisterGorushServer(s *grpc.Server, srv GorushServer) {
	s.RegisterService(&_Gorush_serviceDesc, srv)
}

func _Gorush_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorushServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gorush/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorushServer).Send(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gorush_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gorush",
	HandlerType: (*GorushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Gorush_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorush.proto",
}

func init() { proto1.RegisterFile("gorush.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4e, 0x84, 0x30,
	0x10, 0xc6, 0x65, 0xf9, 0xb3, 0x30, 0x7a, 0xd0, 0x6a, 0x4c, 0xc3, 0x89, 0x10, 0x0f, 0x9c, 0x38,
	0xac, 0x07, 0x37, 0x1e, 0x3c, 0xb9, 0xd1, 0x93, 0x87, 0xfa, 0x04, 0x5d, 0x98, 0x45, 0xb2, 0x2c,
	0x45, 0x3a, 0x98, 0xf0, 0x4a, 0x3e, 0xa5, 0xa1, 0xc0, 0x26, 0x9b, 0xac, 0xa7, 0xf6, 0xf7, 0x4d,
	0x3b, 0x5f, 0xbf, 0x29, 0x5c, 0x15, 0xaa, 0xed, 0xf4, 0x57, 0xda, 0xb4, 0x8a, 0x14, 0x73, 0xcd,
	0x12, 0xff, 0x2e, 0xe0, 0xf6, 0x43, 0x51, 0xb9, 0x2b, 0x33, 0x49, 0xa5, 0xaa, 0x05, 0x7e, 0x77,
	0xa8, 0x89, 0xdd, 0x83, 0x47, 0x6a, 0x8f, 0xb5, 0xe6, 0x56, 0x64, 0x27, 0x81, 0x98, 0x88, 0x85,
	0xe0, 0x37, 0x95, 0xa4, 0x9d, 0x6a, 0x0f, 0x7c, 0x11, 0x59, 0x89, 0x2b, 0x8e, 0xcc, 0x38, 0x2c,
	0x0f, 0xa8, 0xb5, 0x2c, 0x90, 0xdb, 0x91, 0x95, 0x04, 0x62, 0x46, 0x76, 0x07, 0x2e, 0x95, 0x54,
	0x21, 0x77, 0x8c, 0x3e, 0x82, 0x51, 0x55, 0x53, 0x66, 0xdc, 0x9d, 0xd4, 0x01, 0xd8, 0x35, 0xd8,
	0x7b, 0xec, 0xb9, 0x67, 0xb4, 0x61, 0x3b, 0x9c, 0xdb, 0xca, 0xbc, 0x40, 0xbe, 0x34, 0x86, 0x23,
	0xb0, 0x35, 0x38, 0xb9, 0x24, 0xc9, 0xfd, 0xc8, 0x4e, 0x2e, 0x57, 0x0f, 0x63, 0xac, 0xf4, 0x4c,
	0x96, 0xf4, 0x55, 0x92, 0xdc, 0xd4, 0xd4, 0xf6, 0xc2, 0xdc, 0x08, 0x9f, 0x20, 0x38, 0x4a, 0xb3,
	0x9d, 0x75, 0x62, 0xf7, 0x23, 0xab, 0x0e, 0x4d, 0xbe, 0x40, 0x8c, 0xf0, 0xbc, 0x58, 0x5b, 0xf1,
	0x06, 0x6e, 0x4e, 0xfb, 0x37, 0x55, 0x3f, 0xa4, 0xd6, 0x5d, 0x96, 0xa1, 0xd6, 0xa6, 0x89, 0x2f,
	0x66, 0x1c, 0x66, 0x98, 0xa9, 0xae, 0x26, 0x3d, 0x4d, 0x6a, 0xa2, 0xd5, 0x3b, 0x78, 0x6f, 0xe6,
	0x2b, 0xd8, 0x0b, 0x38, 0x9f, 0x58, 0xe7, 0x2c, 0xfc, 0xff, 0xf5, 0x21, 0x3f, 0x5b, 0x6b, 0xaa,
	0x3e, 0xbe, 0xd8, 0x7a, 0xa6, 0xf4, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x48, 0xf1, 0x9d, 0x88,
	0xdb, 0x01, 0x00, 0x00,
}
